volumes:
    db_storage:
    redis_data:
    n8n_data:
    traefik_data:

networks:
    n8n-net:
        driver: bridge
        
services:
    traefik:
        image: "traefik"
        restart: always
        command:
            - "--api.insecure=true"
            - "--providers.docker=true"
            - "--providers.docker.exposedbydefault=false"
            - "--entrypoints.web.address=:80"
            #- "--entrypoints.web.http.redirections.entryPoint.to=websecure"
            #- "--entrypoints.web.http.redirections.entrypoint.scheme=http"
            #- "--entrypoints.websecure.address=:443"
            #- "--certificatesresolvers.mytlschallenge.acme.tlschallenge=true"
            #- "--certificatesresolvers.mytlschallenge.acme.email=${SSL_EMAIL}"
            #- "--certificatesresolvers.mytlschallenge.acme.storage=/letsencrypt/acme.json"
        ports:
            - "80:80"
            #- "443:443"
        volumes:
            - traefik_data:/letsencrypt
            - /var/run/docker.sock:/var/run/docker.sock:ro
        networks:
            - n8n-net
            
    postgres:
        image: postgres:16
        container_name: n8n-postgres
        restart: always
        environment:
            - POSTGRES_USER
            - POSTGRES_PASSWORD
            - POSTGRES_DB
            - POSTGRES_NON_ROOT_USER
            - POSTGRES_NON_ROOT_PASSWORD
        volumes:
            - db_storage:/var/lib/postgresql/data
            - ./init-data.sh:/docker-entrypoint-initdb.d/init-data.sh
        networks:
            - n8n-net
        healthcheck:
            test: ['CMD-SHELL', 'pg_isready -h localhost -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
            interval: 5s
            timeout: 5s
            retries: 10
            
    redis:
        image: redis:7-alpine
        container_name: n8n-redis
        command: ["redis-server", "--appendonly", "yes"]
        volumes:
            - redis_data:/data
        networks:
            - n8n-net
        healthcheck:
            test: ["CMD", "redis-cli", "ping"]
            interval: 5s
            timeout: 3s
            retries: 10

    n8n:
        image: docker.n8n.io/n8nio/n8n
        restart: always
        container_name: n8n
        user: "${PUID}:${PGID}"
        ports:
            - "5678:5678"
        labels:
            - traefik.enable=true
            - traefik.http.routers.n8n.rule=Host(`localhost`)
            #- traefik.http.routers.n8n.tls=true
            - traefik.http.routers.n8n.entrypoints=web #,websecure
            #- traefik.http.routers.n8n.tls.certresolver=mytlschallenge
            #- traefik.http.middlewares.n8n.headers.SSLRedirect=true
            #- traefik.http.middlewares.n8n.headers.STSSeconds=315360000
            #- traefik.http.middlewares.n8n.headers.browserXSSFilter=true
            #- traefik.http.middlewares.n8n.headers.contentTypeNosniff=true
            #- traefik.http.middlewares.n8n.headers.forceSTSHeader=true
            #- traefik.http.middlewares.n8n.headers.SSLHost=${DOMAIN_NAME}
            #- traefik.http.middlewares.n8n.headers.STSIncludeSubdomains=true
            #- traefik.http.middlewares.n8n.headers.STSPreload=true
            - traefik.http.routers.n8n.middlewares=n8n@docker
        environment:
            - N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS=true
            - N8N_HOST=localhost
            - N8N_PORT=5678
            - N8N_PROTOCOL=http
            - N8N_RUNNERS_ENABLED=true
            - NODE_ENV=production
            - WEBHOOK_URL=http://localhost/
            - GENERIC_TIMEZONE=${GENERIC_TIMEZONE}
            - TZ=${GENERIC_TIMEZONE}
            - DB_TYPE=postgresdb
            - DB_POSTGRESDB_HOST=postgres
            - DB_POSTGRESDB_PORT=5432
            - DB_POSTGRESDB_DATABASE=${POSTGRES_DB}
            - DB_POSTGRESDB_USER=${POSTGRES_NON_ROOT_USER}
            - DB_POSTGRESDB_PASSWORD=${POSTGRES_NON_ROOT_PASSWORD}
            - EXECUTIONS_MODE=queue
            - QUEUE_BULL_REDIS_HOST=redis
            - QUEUE_BULL_REDIS_PORT=6379

        networks:
            - n8n-net
        volumes:
            - n8n_data:/home/node/.n8n
            - ./data:/files
        depends_on:
            postgres:
                condition: service_healthy
            redis:
                condition: service_healthy
    